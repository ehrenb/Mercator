"""read in output of mercator and build a networkx graph"""
import json
import logging

import networkx as nx
from networkx.readwrite import json_graph

from Mercator.utils.ComponentType import ComponentType

logger = logging.getLogger('mercator')


def get_color_component(c):
    """give a grouping for a component type

    non-components get '1' -- default blue
    """
    if c['component_type'] == ComponentType.ACTIVITY:
        return 4#blue
    if c['component_type'] == ComponentType.RECEIVER:
        return 8#light blue
    if c['component_type'] == ComponentType.PROVIDER:
        return 5#green
    if c['component_type'] == ComponentType.SERVICE:
        return 7#orange
    else:
        return 1

def create_graph(classes=[], json_path=None):
    
    if json_path:
        classes = []
        with open(json_path,'r') as f:
            classes = json.load(f)
        logger.info('loaded {json_path}'.format(json_path=json_path))


    G=nx.MultiDiGraph()
    n=1
    count = 0
    for c in classes:
        # if count == 1000:
        #     break
        # G.add_node(n, attr_dict=c, group=get_color_component(c))
        # n+=1
        # count+=1

        #testing: only activities (Why are they filling w blue (group=1)? )
        if c['component_type']:
            G.add_node(n, attr_dict=c, group=get_color_component(c))
            n+=1

    n_to_class_name_map = build_n_to_class_name_map(G)

    #xref from edges
    for n in G:
        #class xref from (? -> n)
        for xref_from_name in G.node[n]['xref_from']:
            method_xref_from_name = xref_from_name['method']#unused
            class_xref_from_name = xref_from_name['class']
            class_xref_from_n = __map_lookup(n_to_class_name_map, class_xref_from_name)
            G.add_edge(class_xref_from_n, n, attr_dict=xref_from_name) if class_xref_from_n else None

        #class xref to(n -> ?)
        for xref_to_name in G.node[n]['xref_to']:
            method_xref_to_name = xref_to_name['method']#unused
            class_xref_to_name = xref_to_name['class']
            class_xref_to_n = __map_lookup(n_to_class_name_map, class_xref_to_name)
            G.add_edge(n, class_xref_to_n, attr_dict=xref_to_name) if class_xref_to_n else None


        #method xref from (todo: check suspected overlap with above) (? -> n)
        for method in G.node[n]['methods']:
            for xref_from_name in method['xref_from']:
                method_xref_from_name = xref_from_name['method']
                class_xref_from_name = xref_from_name['class']
                class_xref_from_n = __map_lookup(n_to_class_name_map, method_xref_from_name)
                G.add_edge(class_xref_from_n, n, attr_dict=xref_from_name) if class_xref_from_n else None

        #method xref to(n -> ?)
        for xref_to_name in G.node[n]['methods']:
            for xref_to_name in method['xref_to']:
                method_xref_to_name = xref_to_name['method']
                class_xref_to_name = xref_to_name['class']
                class_xref_to_n = __map_lookup(n_to_class_name_map, class_xref_to_name)
                G.add_edge(n, class_xref_to_n, attr_dict=xref_to_name) if class_xref_to_n else None
          
        #field xref from (read) (? -> n)
        for field in G.node[n]['fields']:
            for xref_read_name in field['xref_read']:
                field_xref_read_name = xref_read_name['method']
                class_xref_read_name = xref_read_name['class']
                class_xref_from_n = __map_lookup(n_to_class_name_map, class_xref_from_name)
                G.add_edge(class_xref_from_n, n, attr_dict=xref_read_name) if class_xref_from_n else None

        #field xref to (write) (n -> ?)
        for field in G.node[n]['fields']:
            for xref_write_name in field['xref_write']:
                field_xref_write_name = xref_write_name['method']
                class_xref_write_name = xref_write_name['class']
                class_xref_write_n = __map_lookup(n_to_class_name_map, class_xref_write_name)
                G.add_edge(class_xref_write_n, n, attr_dict=xref_write_name) if class_xref_write_n else None
    return G

def write_graph(G, out_file):
    data = json_graph.node_link_data(G)
    with open(out_file, 'w') as f:
        json.dump(data, f, indent=4, separators=(',',': '),sort_keys=True)

# def find_n_by_class_name(G, class_name):
#     for n in G:
#         if G[n]['name'] == class_name:
#             return n
#     return None

def build_n_to_class_name_map(G):
    m = {}
    for n in G:
        m[n] = G.node[n]['name']
    return m



def __map_lookup(n_to_class_name_map, xref_name):
    try:
        n = [k for k,v in n_to_class_name_map.items() if v == xref_name][0]
        print(xref_name)
    except IndexError:
        #logging.error('anomaly {xref_name}'.format(xref_name=xref_name))
        print(xref_name)
        return None

if __name__ == '__main__':
    G = create_graph('samples/instagram.json.new')
    write_graph(G, 'samples/instagram.json.new.graph.components.colors')
